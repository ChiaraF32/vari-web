[{"name":"app.R","content":"library(shiny)\nlibrary(dplyr)\nlibrary(DT)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(purrr)\n\n# Increase the maximum upload size to 500 MB\noptions(shiny.maxRequestSize = 800 * 1024^2)\n\n# Function to fetch all available panels (handles pagination)\nfetch_all_panels <- function() {\n  url <- \"https://panelapp.genomicsengland.co.uk/api/v1/panels/\"\n  all_panels <- list()\n  current_url <- url  # Start with the base URL\n  \n  repeat {\n    response <- GET(current_url)\n    if (status_code(response) == 200) {\n      content <- fromJSON(content(response, \"text\"), flatten = TRUE)\n      all_panels <- append(all_panels, list(content$results))  # Ensure it's added as a list\n      # Check if there is a next page\n      if (is.null(content$`next`)) break\n      current_url <- content$`next`\n    } else {\n      stop(\"Failed to fetch panels: \", status_code(response))\n    }\n  }\n  \n  all_panels <- bind_rows(all_panels)\n  return(all_panels)\n}\n\n# Function to fetch genes for a specific panel\nget_genes_for_panel <- function(panel_id) {\n  url <- paste0(\"https://panelapp.genomicsengland.co.uk/api/v1/panels/\", panel_id, \"/\")\n  response <- GET(url)\n  \n  if (status_code(response) == 200) {\n    details <- fromJSON(content(response, \"text\"), flatten = TRUE)\n    genes <- details$genes %>%\n      mutate(\n        gene_symbol = map_chr(gene_data.gene_symbol, ~paste(.x, collapse = \"; \"), .default = NA_character_)\n      ) %>%\n      pull(gene_symbol)  # Extract gene symbols\n    return(genes)\n  } else {\n    stop(\"Failed to fetch genes: \", status_code(response))\n  }\n}\n\nui <- fluidPage(\n  titlePanel(\"T2T Variant Filter Tool with PanelApp\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      fileInput(\"csv_file\", \"Upload CSV File\", accept = c(\".csv\")),\n      \n      # PanelApp dropdown\n      selectizeInput(\"panel_select\", \n                     \"Select Panels from PanelApp:\", \n                     choices = NULL, \n                     multiple = TRUE),\n      \n      # Filters\n      textInput(\"af_filter\", \"Filter Allele Frequency (AF) ≤\", value = \"\"),\n      textInput(\"ac_filter\", \"Filter Allele Count (AC) ≤\", value = \"\"),\n      textInput(\"sv_filter\", \"Filter SV Probability ≤\", value = \"\"),\n      \n      fluidRow(\n        column(\n          6,\n          checkboxGroupInput(\n            \"consequence\", \"Select Consequence\",\n            choices = NULL, selected = NULL, inline = FALSE\n          )\n        ),\n        column(\n          6,\n          checkboxGroupInput(\n            \"variant_class\", \"Select Variant Class\",\n            choices = NULL, selected = NULL, inline = FALSE\n          )\n        )\n      ),\n      \n      selectizeInput(\"impact_filter\", \"Filter by IMPACT\", choices = NULL, multiple = TRUE),\n      selectizeInput(\"gene_filter\", \"Filter by SYMBOL\", choices = NULL, multiple = FALSE),\n      checkboxInput(\"uniquet2t\", \"Show Only Variants Unique to T2T:\", value = FALSE),\n      checkboxInput(\"remove_empty_genotypes\", \n                    \"Remove variants with empty values following 0/0\", \n                    value = FALSE),\n      \n      # Dynamic genotype filter\n      uiOutput(\"genotype_filter_ui\"),\n      \n      actionButton(\"apply_filters\", \"Apply Filters\"),\n      downloadButton(\"download_filtered\", \"Download Filtered Data\")\n    ),\n    \n    mainPanel(\n      DTOutput(\"filtered_table\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  # Fetch all PanelApp panels once the app starts\n  all_panels <- fetch_all_panels()\n  updateSelectInput(session, \"panel_select\", choices = setNames(all_panels$id, all_panels$name))\n  \n  # Reactive for reading and processing the CSV\n  raw_data <- reactive({\n    req(input$csv_file)\n    read.csv(input$csv_file$datapath, stringsAsFactors = FALSE)\n  })\n  \n  # Detect genotype sample columns dynamically\n  sample_columns <- reactive({\n    req(raw_data())\n    colnames(raw_data())[grep(\"^(D\\\\d+|DGS.*|X88549.*)\", colnames(raw_data()))]\n  })\n  \n  # Update dropdown and checkbox choices dynamically\n  observeEvent(raw_data(), {\n    data <- raw_data()\n    updateCheckboxGroupInput(session, \"consequence\", \n                             choices = unique(unlist(strsplit(data$Consequence, \"&\"))),\n                             selected = NULL)\n    updateCheckboxGroupInput(session, \"variant_class\", \n                             choices = unique(data$VARIANT_CLASS),\n                             selected = NULL)\n    updateSelectizeInput(session, \"gene_filter\", \n                         choices = unique(data$SYMBOL), server = TRUE)\n    updateSelectizeInput(session, \"impact_filter\", \n                         choices = unique(data$IMPACT), server = TRUE)\n  })\n  \n  # Generate UI for genotype filter dynamically\n  output$genotype_filter_ui <- renderUI({\n    req(sample_columns())\n    tagList(\n      lapply(sample_columns(), function(sample) {\n        selectInput(\n          inputId = paste0(\"genotype_\", sample),\n          label = paste(\"Genotype for\", sample),\n          choices = c(\"All\", \"0/0\", \"0/1\", \"1/1\"),\n          selected = \"All\"\n        )\n      })\n    )\n  })\n  \n  # Reactive for filtering data\n  filtered_data <- eventReactive(input$apply_filters, {\n    req(raw_data())\n    data <- raw_data()\n    \n    # Apply AF filter to specific fields\n    af_columns <- c(\"AF_HPRC\", \"AF_1000G\", \"AF_gnomad\", \"AF_hgsvc3\")\n    af_columns <- intersect(af_columns, colnames(data)) # Ensure columns exist in the data\n    if (input$af_filter != \"\" && length(af_columns) > 0) {\n      af_threshold <- as.numeric(input$af_filter)\n      if (!is.na(af_threshold)) {\n        data <- data %>% filter(\n          rowSums(sapply(af_columns, function(col) {\n            suppressWarnings(as.numeric(data[[col]]) > af_threshold) # Convert to numeric and filter\n          }), na.rm = TRUE) == 0 # Keep rows where no column exceeds the threshold\n        )\n      }\n    }\n    \n    # Apply AC filter to all columns containing \"AC\"\n    ac_columns <- grep(\"AC\", colnames(data), value = TRUE)\n    if (input$ac_filter != \"\" && length(ac_columns) > 0) {\n      ac_threshold <- as.numeric(input$ac_filter)\n      if (!is.na(ac_threshold)) {\n        data <- data %>% filter(\n          rowSums(sapply(ac_columns, function(col) {\n            suppressWarnings(as.numeric(data[[col]]) > ac_threshold)\n          }), na.rm = TRUE) == 0\n        )\n      }\n    }\n    \n    # Apply SV filter \n    if (input$sv_filter != \"\") {\n      sv_threshold <- suppressWarnings(as.numeric(input$sv_filter))\n      if (!is.na(sv_threshold)) {\n        data <- data %>% filter(is.na(MeanPROB) | MeanPROB > sv_threshold)\n      }\n    }\n    \n    # Inclusive filtering for Consequence and VARIANT_CLASS\n    if (!is.null(input$consequence) && length(input$consequence) > 0 &&\n        !is.null(input$variant_class) && length(input$variant_class) > 0) {\n      data <- data %>% filter(\n        sapply(Consequence, function(x) {\n          any(input$consequence %in% unlist(strsplit(x, \"&\")))\n        }) |\n          VARIANT_CLASS %in% input$variant_class\n      )\n    } else {\n      # Apply Consequence filter independently if no VARIANT_CLASS filter\n      if (!is.null(input$consequence) && length(input$consequence) > 0) {\n        data <- data %>% filter(\n          sapply(Consequence, function(x) {\n            any(input$consequence %in% unlist(strsplit(x, \"&\")))\n          })\n        )\n      }\n      # Apply VARIANT_CLASS filter independently if no Consequence filter\n      if (!is.null(input$variant_class) && length(input$variant_class) > 0) {\n        data <- data %>% filter(\n          VARIANT_CLASS %in% input$variant_class\n        )\n      }\n    }\n    \n    # Apply SYMBOL filter if not \"All\"\n    if (!is.null(input$gene_filter) && input$gene_filter != \"\") {\n      data <- data %>% filter(SYMBOL == input$gene_filter)\n    }\n    \n    # Apply IMPACT filter\n    if (!is.null(input$impact_filter) && length(input$impact_filter) > 0) {\n      data <- data %>% filter(IMPACT %in% input$impact_filter)\n    }\n    \n    # Apply UniqueT2T filter\n    if (input$uniquet2t) {\n      data <- data %>% filter(UniqueT2T == \"Yes\")\n    }\n    \n    # Apply genotype filters\n    genotype_inputs <- lapply(sample_columns(), function(sample) {\n      input[[paste0(\"genotype_\", sample)]]\n    })\n    names(genotype_inputs) <- sample_columns()\n    \n    for (sample in names(genotype_inputs)) {\n      genotype <- genotype_inputs[[sample]]\n      if (genotype != \"All\") {\n        data <- data %>% filter(grepl(genotype, .data[[sample]]))\n      }\n    }\n    \n    # Reorder columns\n    selected_columns <- c(\"SYMBOL\", \"VARIANT_CLASS\", \"HGVSc\", \"Consequence\", \n                          \"CHROM\", \"POS\", \"ID\", \"QUAL\", \"FORMAT\")\n    genotype_columns <- sample_columns()\n    remaining_columns <- setdiff(colnames(data), c(selected_columns, genotype_columns))\n    data <- data %>% select(all_of(selected_columns), all_of(genotype_columns), all_of(remaining_columns))\n    \n    # Dynamically remove unfilled columns\n    data <- data[, colSums(!is.na(data) & data != \"\") > 0]\n  \n    # Apply PanelApp filter for multiple panels\n    if (!is.null(input$panel_select) && length(input$panel_select) > 0) {\n      panel_genes <- unlist(lapply(input$panel_select, get_genes_for_panel))\n      data <- data %>% filter(SYMBOL %in% panel_genes)\n    }\n    \n    # Remove rows where any genotype column has empty values (0/0:0:0... or 0/0:.:.:...)\n    if (input$remove_empty_genotypes) {\n      genotype_cols <- sample_columns()\n      if (length(genotype_cols) > 0) {\n        data <- data %>% filter(\n          rowSums(sapply(genotype_cols, function(col) {\n            grepl(\"^0/0(:0)+$\", data[[col]]) | grepl(\"^0/0(:\\\\.)+$\", data[[col]])  # Match empty patterns\n          })) == 0  # Keep rows where no column matches any of the empty patterns\n        )\n      }\n    }\n\n    return(data)\n  })\n  \n  # Render filtered table\n  output$filtered_table <- renderDT({\n    req(filtered_data())\n    datatable(filtered_data())\n  })\n  \n  # Download handler for filtered data\n  output$download_filtered <- downloadHandler(\n    filename = function() {\n      paste(\"filtered_data\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write.csv(filtered_data(), file, row.names = FALSE)\n    },\n    contentType = \"text/csv\"\n  )\n}\n\nshinyApp(ui, server)\n\n","type":"text"},{"name":"README.md","content":"vari-web\n\nUse R 4.4.1 and the following libraries must be installed:\n \n```\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(DT)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(purrr)\n```\n","type":"text"}]
